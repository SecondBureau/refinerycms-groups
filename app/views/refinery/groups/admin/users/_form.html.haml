= form_for [refinery, :groups, :admin, @group, @user] do |f|
  = render '/refinery/admin/error_messages', :object => @user, :include_object_name => true
  = f.hidden_field :group_id, :value => @group.id

  %div{style: "width:50%;float:left;"}
    .field
      = f.label :username
      = f.text_field :username
    .field
      = f.label :email
      = f.text_field :email
    .field
      = f.label :password
      = f.password_field :password, :autocomplete => 'off'
      - if @user.persisted?
        = content_tag(:br)
        = content_tag(:span, t('blank_password_keeps_current', :scope => 'refinery.admin.users.form'))
    .field
      = f.label :password_confirmation
      = f.password_field :password_confirmation, :autocomplete => 'off'

  %div{style: "width:50%;float:left;"}
    .field
      = label_tag :admin
      = check_box_tag :admin, "group-admin", @user.has_role?("GroupAdmin")

    - if current_refinery_user.has_role?("Refinery") || current_refinery_user.has_role?("Superuser")
      .field
        = f.label :group
        = select("user", "group_id", Refinery::Groups::Group.all.collect{|group| [group.name, group.id] }, :selected => @group.id)


  .clearfix
  
  = render '/refinery/admin/form_actions', :f => f,
             :continue_editing => false,
             :hide_delete => !current_refinery_user.can_delete?(@user),
             :delete_title => t('delete', :scope => 'refinery.admin.users'),
             :delete_confirmation => t('message', :scope => 'refinery.admin.delete', :title => @user.username)

